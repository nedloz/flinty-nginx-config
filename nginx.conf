# количество официантов
worker_processes auto;

events {
    # количество запросов которые может одновременно обработать один официант
    worker_connections 1024;
    # (необяз) официант обрабатывает все соединения сразу а не по очереди
    multi_accept on; 
    # (необяз) официанты поочереди принимают входящие соединения (чтобы не было 2х официантов на один стол)
    accept_mutex on;
}

http {
    include mime.types;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    client_max_body_size 10M;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_min_length 1000; 
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        application/xml
        text/javascript
        text/xml
        application/xhtml+xml;
    
    charset utf-8;

    server_tokens off;

    server {
        listen 80;
        server_name localhost;

        location /auth/validate {
            internal;
            proxy_pass http://host.docker.internal:3000/auth/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
        }

        location ~ ^/api/auth/(login|register|verify-2fa|request-2fa-code|refresh)$ {
            rewrite ^/api(/auth/.*)$ "$1" break;
            proxy_pass http://host.docker.internal:3000;
        }

        location  ~ ^/api/(auth|users/me)(/.)?$ {
            rewrite ^/api(/.*)$ "$1" break;
            auth_request /auth/validate;
            include /etc/nginx/includes/proxy-to-auth.conf;
        
        }

        location = /ping {
            return 200 'pong';
        }
    }
}
# // login
# // register
# // /verify-2fa
# // refresh
# // /auth/request-2fa-code
# docker build -t flinty-nginx .
# docker run -d -p 80:80 --name flinty-nginx-container flinty-nginx