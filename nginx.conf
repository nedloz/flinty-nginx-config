# количество официантов
worker_processes auto;

events {
    # количество запросов которые может одновременно обработать один официант
    worker_connections 1024;
    # (необяз) официант обрабатывает все соединения сразу а не по очереди
    multi_accept on; 
    # (необяз) официанты поочереди принимают входящие соединения (чтобы не было 2х официантов на один стол)
    accept_mutex on;
}

http {
    include mime.types;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    client_max_body_size 10M;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_min_length 1000; 
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        application/xml
        text/javascript
        text/xml
        application/xhtml+xml;
    
    charset utf-8;

    server_tokens off;

    server {
        listen 80;
        server_name localhost;

        location ~ ^/api/auth/(login|register|verify|request-2fa-code|refresh)$ {
            rewrite ^/api(/auth/.*)$ "$1" break;
            proxy_pass http://user-auth-svc:3000;
        }

        location /auth/validate {
            internal;
            proxy_pass http://user-auth-svc:3000/auth/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
        }

        location ^~ /api/users/me/subscriptions {
            rewrite ^/api(/.*)$ "$1" break;
            auth_request /auth/validate;
            auth_request_set $user_id $upstream_http_x_user_id;
            proxy_pass http://user-sub-svc:7000;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-Id $user_id;
        }


        location  ~ ^/api/(auth/.*|users/me(/.*)?)$ {
            rewrite ^/api(/.*)$ "$1" break;
            auth_request /auth/validate;
            auth_request_set $user_id $upstream_http_x_user_id;
            proxy_pass http://user-auth-svc:3000;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-Id $user_id;
        }

        # Обработка запросов типа /api/servers/:server_id/:channel_id/...
        location ~ ^/api/servers/([^/]+)/([^/]+)/ {
            set $server_id $1;
            set $channel_id $2;

            rewrite ^/api(/.*)$ "$1" break;

            auth_request /auth/validate;
            auth_request_set $user_id $upstream_http_x_user_id;

            proxy_pass http://server-svc:4000;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-Server-Id $server_id;
            proxy_set_header X-Channel-Id $channel_id;
        }

        # Обработка всех запросов с :server_id (без channel_id)
        location ~ ^/api/servers/([^/]+)/ {
            set $server_id $1;

            rewrite ^/api(/.*)$ "$1" break;

            auth_request /auth/validate;
            auth_request_set $user_id $upstream_http_x_user_id;

            proxy_pass http://server-svc:4000;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-Server-Id $server_id;
        }

        # # Список всех серверов — /api/servers/
        location ~ ^/api/servers {
            rewrite ^/api(/.*)$ "$1" break;

            auth_request /auth/validate;
            auth_request_set $user_id $upstream_http_x_user_id;

            proxy_pass http://server-svc:4000;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-Id $user_id;
        }

        # ws подключение 
        location /ws {
            proxy_pass http://ws-gateway:5000;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_buffering off;
        }
      


        location = /ping {
            return 200 'pong';
        }
    }
}

# docker build -t flinty .
# docker run -d -p 80:80 --name flinty-container flinty